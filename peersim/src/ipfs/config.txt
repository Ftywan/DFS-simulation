# network size
SIZE 500

# chunk size
CHUNKSIZE 256

# no. of chunks at the initial stage
NUMCHUNK SIZE * 100

# parameters of periodic execution
CYCLES 5
CYCLE SIZE*1000

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 50
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

simulation.experiments 1

#################### Network initialization ####################
init.net ipfs.NetworkInitializer
init.net.protocol ipfs
init.net.transport tr
init.net.numChunk NUMCHUNK

init.rndlink WireKOut
init.rndlink.k 20
init.rndlink.protocol link

init.utility ipfs.IPFSUtilities
init.utility.linkable link
init.utility.transport tr
init.utility.step CYCLE

init.sch CDScheduler
init.sch.protocol ipfs
init.sch.randstart
#################### Network protocol ####################
protocol.link peersim.core.IdleProtocol

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

#################### IPFS protocol ####################
protocol.ipfs ipfs.IPFS
protocol.ipfs.drop DROP
#protocol.ipfs.transport tr
#protocol.ipfs.linkable link
protocol.ipfs.step CYCLE

#################### observer ####################
control.observer ipfs.IPFSObserver
control.observer.protocol ipfs
control.observer.step 10000